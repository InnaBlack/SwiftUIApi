//
// WeatherForecastAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class WeatherForecastAPI {
    /**
     Weather Forecast API
     
     - parameter sendAsDatasource: (query)  (optional)
     - parameter allowAsynch: (query)  (optional)
     - parameter shortColumnNames: (query)  (optional)
     - parameter locations: (query)  (optional)
     - parameter aggregateHours: (query)  (optional)
     - parameter contentType: (query)  (optional)
     - parameter unitGroup: (query)  (optional)
     - parameter key: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func visualCrossingWebServicesRestServicesWeatherdataForecastGet(locations: String? = nil, aggregateHours: String? = nil, contentType: String? = nil, unitGroup: String? = nil, key: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: WeatherDestination?,_ error: Error?) -> Void)) {
        visualCrossingWebServicesRestServicesWeatherdataForecastGetWithRequestBuilder(locations: locations, aggregateHours: aggregateHours, contentType: contentType, unitGroup: unitGroup, key: key).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Weather Forecast API
     - GET /VisualCrossingWebServices/rest/services/weatherdata/forecast
     - Provides access to weather forecast information. The forecast is available for up to 15 days at the hourly, 12 hour and daily summary level.
     - parameter sendAsDatasource: (query)  (optional)
     - parameter allowAsynch: (query)  (optional)
     - parameter shortColumnNames: (query)  (optional)
     - parameter locations: (query)  (optional)
     - parameter aggregateHours: (query)  (optional)
     - parameter contentType: (query)  (optional)
     - parameter unitGroup: (query)  (optional)
     - parameter key: (query)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func visualCrossingWebServicesRestServicesWeatherdataForecastGetWithRequestBuilder(locations: String? = nil, aggregateHours: String? = nil, contentType: String? = nil, unitGroup: String? = nil, key: String? = nil) -> RequestBuilder<WeatherDestination> {
        let path = "/VisualCrossingWebServices/rest/services/weatherdata/forecast"
        let URLString = OpenAPIClientAPI.baseWeatherPath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "locations": locations?.encodeToJSON(), 
            "aggregateHours": aggregateHours?.encodeToJSON(), 
            "contentType": contentType?.encodeToJSON(), 
            "unitGroup": unitGroup?.encodeToJSON(), 
            "key": key?.encodeToJSON()
        ])
        
        let requestBuilder: RequestBuilder<WeatherDestination>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
