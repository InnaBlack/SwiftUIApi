//
// WeatherDestination.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

struct GenericCodingKeys: CodingKey {
    var intValue: Int?
    var stringValue: String
    
    init?(intValue: Int) { self.intValue = intValue; self.stringValue = "\(intValue)" }
    init?(stringValue: String) { self.stringValue = stringValue }
    
    static func makeKey(name: String) -> GenericCodingKeys {
        return GenericCodingKeys(stringValue: name)!
    }
}

public struct WeatherDestination: Codable { 
    
    
    public var locations: [String: WeatherLocation]?
    
    private enum CodingKeys: String, CodingKey {
        case locations
    }
    
    public init(values: [String: WeatherLocation]) {
        self.locations = values
    }
    
    public init(from decoder: Decoder) throws {
        
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        locations = [String: WeatherLocation]()
        let subContainer = try container.nestedContainer(keyedBy: GenericCodingKeys.self, forKey: .locations)
        for key in subContainer.allKeys {
            locations?[key.stringValue] = try subContainer.decode(WeatherLocation.self, forKey: key)
        }
    }
}
